#!/usr/bin/env bash

command_exists()
{
    command -v "$@" > /dev/null 2>&1
}

B_to_MiB()
{
    awk '{ printf "%.0f MiB\n", $0 / 1024 / 1024 } END { if (NR == 0) { print "error" } }'
}

finish()
{
    printf '\n'
    rm -f test_$$
    exit
}

printf '%s\n' '-------------------------------------------------'
printf ' HOSTLP -- https://www.hostlp.com.br\n'
date   '+     %F %T'
printf '%s\n' '-------------------------------------------------'

printf '\n'

date=`date`
load=`cat /proc/loadavg | awk '{print $1}'`
root_usage=`df -h / | awk '/\// {print $(NF-1)}'`
memory_usage=`free -m | awk '/Mem:/ { total=$2 } /buffers\/cache/ { used=$3 } END { printf("%3.1f%%", used/total*100)}'`
swap_usage=`free -m | awk '/Swap/ { printf("%3.1f%%", "exit !$2;$3/$2*100") }'`
users=`users | wc -w`
time=`uptime | grep -ohe 'up .*' | sed 's/,/\ hours/g' | awk '{ printf $2" "$3 }'`
processes=`ps aux | wc -l`
ip=`ifconfig $(route | grep default | awk '{ print $8 }') | grep "inet addr" | awk -F: '{print $2}' | awk '{print $1}'`
 
printf "System load:\t%s\tIP Address:\t%s\n" $load $ip
printf "Memory usage:\t%s\tSystem uptime:\t%s\n" $memory_usage "$time"
printf "Usage on /:\t%s\tSwap usage:\t%s\n" $root_usage $swap_usage
printf "Local Users:\t%s\tProcesses:\t%s\n" $users $processes
echo


# Basic info
if [ "$(uname)" = "Linux" ]
then
    printf 'Processor:    '
    awk -F: '/model name/ {name=$2} END {print name}' /proc/cpuinfo | sed 's/^[ \t]*//;s/[ \t]*$//'
    printf 'CPU cores:    '
    awk -F: '/model name/ {core++} END {print core}' /proc/cpuinfo
    printf 'Frequency:    '
    awk -F: ' /cpu MHz/ {freq=$2} END {print freq " MHz"}' /proc/cpuinfo | sed 's/^[ \t]*//;s/[ \t]*$//'
    printf 'RAM:          '
    free -h | awk 'NR==2 {print $2}'
    if [ "$(swapon -s | wc -l)" -lt 2 ]
    then
        printf 'Swap:         -\n'
    else
        printf 'Swap:         '
        free -h | awk '/Swap/ {printf $2}'
        printf '\n'
    fi
else
    # we'll assume FreeBSD, might work on other BSDs too
    printf 'Processor:    '
    sysctl -n hw.model
    printf 'CPU cores:    '
    sysctl -n hw.ncpu
    printf 'Frequency:    '
    grep -Eo -- '[0-9.]+-MHz' /var/run/dmesg.boot | tr -- '-' ' ' | sort -u
    printf 'RAM:          '
    sysctl -n hw.physmem | B_to_MiB

    if [ "$(swapinfo | wc -l)" -lt 2 ]
    then
        printf 'Swap:         -\n'
    else
        printf 'Swap:         '
        swapinfo -k | awk 'NR>1 && $1!="Total" {total+=$2} END {print total*1024}' | B_to_MiB
    fi
fi
printf 'Kernel:       '
uname -s -r -m

printf '\n'

printf 'Disks:\n'
if command_exists lsblk && [ -n "$(lsblk)" ]
then
    lsblk --nodeps --noheadings --output NAME,SIZE,ROTA --exclude 1,2,11 | sort | awk '{if ($3 == 0) {$3="SSD"} else {$3="HDD"}; printf("%-3s%8s%5s\n", $1, $2, $3)}'
elif [ -r "/var/run/dmesg.boot" ]
then
    awk '/(ad|ada|da|vtblk)[0-9]+: [0-9]+.B/ { print $1, $2/1024, "GiB" }' /var/run/dmesg.boot | sort -u
elif command_exists df
then
    df -h --output=source,fstype,size,itotal | awk 'NR == 1 || /^\/dev/'
else
    printf '[ no data available ]'
fi

printf '\n'

# Network speedtests

ipv4=$(curl -4 -s --max-time 5 http://icanhazip.com/)
if [ -n "$ipv4" ]
then
    printf 'IPv4\n'
    printf '    IPv4 Público:    %s\n' "$ipv4"
    printf '\n'

else
    printf 'IPv4 não encontrado\n'
fi

printf '\n'

ipv6=$(curl -6 -s --max-time 5 http://icanhazip.com/)
if [ -n "$ipv6" ]
then
    printf 'IPv6\n'
    printf '    IPv6 Público:    %s\n' "$ipv6"
    printf '\n'

else
    printf 'IPv6 não encontrado\n'
fi
echo
printf '%s\n' '-------------------------------------------------'

printf '\n'
